@page "/"
@rendermode InteractiveServer

@using System;
@using BCrypt.Net;
@using Microsoft.EntityFrameworkCore;
@inject MyDbContext Db;
@using DataBase.Entidades;
@inject AlertService alertService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage



<AuthorizeView>
    <Authorized>
        <PageTitle>Home</PageTitle>

        <p>Hola, @context.User.Identity.Name</p>

    </Authorized>
    <NotAuthorized>
        <PageTitle>Iniciar sessió</PageTitle>

        <div class="container-fluid d-flex justify-content-center align-items-center" style="background-image: url('Prototipo_GeoData.png');height: 87vh">
            <div>
                <div class="mb-4 text-center">
                    <img src="Institut.png" alt="Logo" class="img-fluid" style="max-width: 150px;" />
                    <h1 class="mb-3 fw-bold">GeoData Manager</h1>
                    <p class="mb-4 text-muted">Iniciar sessió per continuar</p> 
                </div>

                <RadzenLogin AllowRegister="false"
                  AllowResetPassword="false"
                  FormFieldVariant="Variant.Outlined"
                  LoginText="Inicia sessió"
                  UserText="Usuari"
                  PasswordText="Contrasenya"
                  Login="@((args) => Login(args.Username, args.Password))" />

            </div>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
  private Usuario user = new Usuario();

  //string contraseña = BCrypt.HashPassword("Ubuntu25"); Te crea el hash de X texto, con BCrypt.Verify() te mira esto y revisa hashes

  private async Task Login(string usuari_nom, string usuari_password)
  {
      //StateHasChanged();
      user = await Db.Usuarios.FirstOrDefaultAsync(u => u.Nombre == usuari_nom);

      if (user != null)
      {
          bool valid = BCrypt.Verify(usuari_password, user.Contrasenya);
          if (valid)
          {
            Console.WriteLine("Login correcto");

            // Autenticamos al usuario si todo va bien
            await localStorage.SetItemAsync("authUser", user.Nombre);

            if (AuthenticationStateProvider is CustomAuthenticationStateProvider customAuth)
            {
                customAuth.MarkUserAsAuthenticated(user.Nombre);
                Navigation.NavigateTo("/database/", true);
            }
          }
          else
          {
              await alertService.ShowAlert("Contraseña incorrecta", "Problema con la contraseña");
          }
      }
      else
      {
          await alertService.ShowAlert("Usuario incorrecto", "Problema con el usuario");
      }
  }
}