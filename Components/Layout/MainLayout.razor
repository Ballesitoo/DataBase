@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization;

@using System;
@using BCrypt.Net;
@using Microsoft.EntityFrameworkCore;
@inject MyDbContext Db;
@using DataBase.Entidades;
@inject AlertService alertService;
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@inject AuthenticationStateProvider AuthenticationStateProvider
@implements IDisposable

<div class="page">

    
    <AuthorizeView>
        <Authorized>
            <div class="sidebar">
                <NavMenu />
            </div>
        </Authorized>
        <NotAuthorized>
            <!--<div class="sidebar">
                <NavMenu />
            </div>-->
        </NotAuthorized>
    </AuthorizeView>
    

    <main>
        <RadzenComponents @rendermode="InteractiveServer" />
        <!--<div class="top-row px-4">
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>-->

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui">
    An unhandled error has occurred.
    <a href="" class="reload">Reload</a>
    <a class="dismiss">🗙</a>
</div>

@code {
    private AuthenticationState? _authState;

    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthStateChanged;
        _authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    }

    private async void OnAuthStateChanged(Task<AuthenticationState> task)
    {
        _authState = await task;
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthStateChanged;
    }
}
